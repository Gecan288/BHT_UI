{
  "uid" : "fb3431166fca6f98",
  "name" : "验证银行卡有效性",
  "fullName" : "scripts.test_wallet.TestWallet#test_bank_card",
  "historyId" : "dda195122b2dc5e4ccf945e3caa953d6",
  "time" : {
    "start" : 1624522090289,
    "stop" : 1624522094471,
    "duration" : 4182
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=74.0.3729.136)\n  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.19041 x86_64)",
  "statusTrace" : "self = <test_wallet.TestWallet object at 0x0000021FA7FE8B48>, card_number = '621700002583283', bank = '', toast = '无法使用'\n\n    @allure.story(\"验证银行卡\")\n    @allure.title(\"验证银行卡有效性\")\n    @allure.step(\"开始执行用例\")\n    @pytest.mark.parametrize(\"card_number, bank, toast\", read_line(\"wallet.txt\", 1, 4))\n    def test_bank_card(self, card_number, bank, toast):\n        if toast:\n            try:\n                self.wallet.page_input_card_number(card_number)\n                self.wallet.page_click_add_next()\n>               assert toast in self.wallet.page_get_error_toast()\n\nscripts\\test_wallet.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage\\page_wallet.py:84: in page_get_error_toast\n    if \"加载中\" in self.base_get_text(Page.login_error_toast, timeout=2, poll=0.1):\nbase\\base.py:37: in base_get_text\n    return self.base_find_element(loc, timeout=timeout, poll=poll).text\nd:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\nd:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nd:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nd:\\tools\\python3.7.4\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: in check_response\n    raise wde\nd:\\tools\\python3.7.4\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000021FA81930C8>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\\\\\\\core-js\\\\\\\\modules\\\\\\\\_microtask.js:18:1)\\\\n    at process._tickCallback (internal/process/next_tick.js:61:11)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=74.0.3729.136)\nE         (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.19041 x86_64)\n\nd:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "xunit_setup_class_fixture_TestWallet",
    "time" : {
      "start" : 1624522036296,
      "stop" : 1624522065644,
      "duration" : 29348
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "跳过开屏广告",
      "time" : {
        "start" : 1624522053720,
        "stop" : 1624522054608,
        "duration" : 888
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "点击导航栏钱包",
      "time" : {
        "start" : 1624522054608,
        "stop" : 1624522065644,
        "duration" : 11036
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true,
    "stepsCount" : 2
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=74.0.3729.136)\n  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.19041 x86_64)",
    "statusTrace" : "self = <test_wallet.TestWallet object at 0x0000021FA7FE8B48>, card_number = '621700002583283', bank = '', toast = '无法使用'\n\n    @allure.story(\"验证银行卡\")\n    @allure.title(\"验证银行卡有效性\")\n    @allure.step(\"开始执行用例\")\n    @pytest.mark.parametrize(\"card_number, bank, toast\", read_line(\"wallet.txt\", 1, 4))\n    def test_bank_card(self, card_number, bank, toast):\n        if toast:\n            try:\n                self.wallet.page_input_card_number(card_number)\n                self.wallet.page_click_add_next()\n>               assert toast in self.wallet.page_get_error_toast()\n\nscripts\\test_wallet.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage\\page_wallet.py:84: in page_get_error_toast\n    if \"加载中\" in self.base_get_text(Page.login_error_toast, timeout=2, poll=0.1):\nbase\\base.py:37: in base_get_text\n    return self.base_find_element(loc, timeout=timeout, poll=poll).text\nd:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\nd:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nd:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nd:\\tools\\python3.7.4\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: in check_response\n    raise wde\nd:\\tools\\python3.7.4\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000021FA81930C8>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\\\\\\\core-js\\\\\\\\modules\\\\\\\\_microtask.js:18:1)\\\\n    at process._tickCallback (internal/process/next_tick.js:61:11)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=74.0.3729.136)\nE         (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.19041 x86_64)\n\nd:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException",
    "steps" : [ {
      "name" : "开始执行用例",
      "time" : {
        "start" : 1624522090289,
        "stop" : 1624522094471,
        "duration" : 4182
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=74.0.3729.136)\n  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.19041 x86_64)\n\n",
      "statusTrace" : "  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\Demo\\BHTAndroidAutoTest\\scripts\\test_wallet.py\", line 47, in test_bank_card\n    assert toast in self.wallet.page_get_error_toast()\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\Demo\\BHTAndroidAutoTest\\Page\\page_wallet.py\", line 84, in page_get_error_toast\n    if \"加载中\" in self.base_get_text(Page.login_error_toast, timeout=2, poll=0.1):\n  File \"D:\\Demo\\BHTAndroidAutoTest\\base\\base.py\", line 37, in base_get_text\n    return self.base_find_element(loc, timeout=timeout, poll=poll).text\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 76, in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 31, in check_response\n    raise wde\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 26, in check_response\n    super().check_response(response)\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ {
        "name" : "输入银行卡号",
        "time" : {
          "start" : 1624522090289,
          "stop" : 1624522091433,
          "duration" : 1144
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "number",
          "value" : "'621700002583283'"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 0
      }, {
        "name" : "点击下一步",
        "time" : {
          "start" : 1624522091433,
          "stop" : 1624522092090,
          "duration" : 657
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false,
        "stepsCount" : 0
      }, {
        "name" : "获取toast",
        "time" : {
          "start" : 1624522092091,
          "stop" : 1624522092624,
          "duration" : 533
        },
        "status" : "broken",
        "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=74.0.3729.136)\n  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 10.0.19041 x86_64)\n\n",
        "statusTrace" : "  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\Demo\\BHTAndroidAutoTest\\Page\\page_wallet.py\", line 84, in page_get_error_toast\n    if \"加载中\" in self.base_get_text(Page.login_error_toast, timeout=2, poll=0.1):\n  File \"D:\\Demo\\BHTAndroidAutoTest\\base\\base.py\", line 37, in base_get_text\n    return self.base_find_element(loc, timeout=timeout, poll=poll).text\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 76, in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 31, in check_response\n    raise wde\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 26, in check_response\n    super().check_response(response)\n  File \"d:\\tools\\python3.7.4\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "hasContent" : true,
        "stepsCount" : 0
      } ],
      "attachments" : [ {
        "uid" : "cea081f5c48edd6b",
        "name" : "失败原因见截图:",
        "source" : "cea081f5c48edd6b.png",
        "type" : "image/png",
        "size" : 196428
      } ],
      "parameters" : [ {
        "name" : "card_number",
        "value" : "'621700002583283'"
      }, {
        "name" : "bank",
        "value" : "''"
      }, {
        "name" : "toast",
        "value" : "'无法使用'"
      } ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 3
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 4
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_TestWallet::0",
    "time" : {
      "start" : 1624522221938,
      "stop" : 1624522247868,
      "duration" : 25930
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "退出登录",
      "time" : {
        "start" : 1624522221938,
        "stop" : 1624522247540,
        "duration" : 25602
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true,
    "stepsCount" : 1
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "验证银行卡"
  }, {
    "name" : "feature",
    "value" : "钱包模块"
  }, {
    "name" : "parentSuite",
    "value" : "scripts"
  }, {
    "name" : "suite",
    "value" : "test_wallet"
  }, {
    "name" : "subSuite",
    "value" : "TestWallet"
  }, {
    "name" : "host",
    "value" : "LAPTOP-NOINN6VH"
  }, {
    "name" : "thread",
    "value" : "31724-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "scripts.test_wallet"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "bank",
    "value" : "''"
  }, {
    "name" : "card_number",
    "value" : "'621700002583283'"
  }, {
    "name" : "toast",
    "value" : "'无法使用'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "fb3431166fca6f98.json",
  "parameterValues" : [ "''", "'621700002583283'", "'无法使用'" ]
}